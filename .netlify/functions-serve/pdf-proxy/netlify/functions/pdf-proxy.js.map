{
  "version": 3,
  "sources": ["../../workspace/media-file-manager/netlify/functions/pdf-proxy.js"],
  "sourceRoot": "/tmp/tmp-694-9qqC2PeIQaHW",
  "sourcesContent": ["// A proxy for serving PDFs through Netlify with a size guard.\nconst MAX_STREAM_BYTES = 15 * 1024 * 1024; // ~15MB limit for proxying\n\nexports.handler = async (event) => {\n  try {\n    const origin = event.headers.origin || '';\n    const allowed = (process.env.ALLOW_ORIGIN || '').split(',').map((s) => s.trim()).filter(Boolean);\n    const cors = {\n      'access-control-allow-origin': allowed.includes(origin) ? origin : allowed[0] || '*',\n      'access-control-allow-headers': 'content-type',\n      'access-control-allow-methods': 'GET, OPTIONS'\n    };\n    if (event.httpMethod === 'OPTIONS') return { statusCode: 204, headers: cors, body: '' };\n\n    const url = new URL(event.rawUrl).searchParams.get('url');\n    if (!url) return { statusCode: 400, headers: cors, body: 'Missing url param' };\n    // Check size via HEAD\n    const head = await fetch(url, { method: 'HEAD' });\n    const len = Number(head.headers.get('content-length') || '0');\n    if (len && len > MAX_STREAM_BYTES) {\n      return {\n        statusCode: 413,\n        headers: cors,\n        body: JSON.stringify({ error: 'PDF too large for proxy', useDirectUrl: url })\n      };\n    }\n    const res = await fetch(url);\n    const buf = Buffer.from(await res.arrayBuffer());\n    return {\n      statusCode: res.status,\n      headers: { ...cors, 'content-type': res.headers.get('content-type') || 'application/pdf' },\n      body: buf.toString('base64'),\n      isBase64Encoded: true\n    };\n  } catch (e) {\n    return { statusCode: 500, body: e?.message || 'proxy error' };\n  }\n};\n"],
  "mappings": ";;;AACA,IAAM,mBAAmB,KAAK,OAAO;AAErC,QAAQ,UAAU,OAAO,UAAU;AACjC,MAAI;AACF,UAAM,SAAS,MAAM,QAAQ,UAAU;AACvC,UAAM,WAAW,QAAQ,IAAI,gBAAgB,IAAI,MAAM,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,OAAO,OAAO;AAC/F,UAAM,OAAO;AAAA,MACX,+BAA+B,QAAQ,SAAS,MAAM,IAAI,SAAS,QAAQ,CAAC,KAAK;AAAA,MACjF,gCAAgC;AAAA,MAChC,gCAAgC;AAAA,IAClC;AACA,QAAI,MAAM,eAAe,UAAW,QAAO,EAAE,YAAY,KAAK,SAAS,MAAM,MAAM,GAAG;AAEtF,UAAM,MAAM,IAAI,IAAI,MAAM,MAAM,EAAE,aAAa,IAAI,KAAK;AACxD,QAAI,CAAC,IAAK,QAAO,EAAE,YAAY,KAAK,SAAS,MAAM,MAAM,oBAAoB;AAE7E,UAAM,OAAO,MAAM,MAAM,KAAK,EAAE,QAAQ,OAAO,CAAC;AAChD,UAAM,MAAM,OAAO,KAAK,QAAQ,IAAI,gBAAgB,KAAK,GAAG;AAC5D,QAAI,OAAO,MAAM,kBAAkB;AACjC,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,MAAM,KAAK,UAAU,EAAE,OAAO,2BAA2B,cAAc,IAAI,CAAC;AAAA,MAC9E;AAAA,IACF;AACA,UAAM,MAAM,MAAM,MAAM,GAAG;AAC3B,UAAM,MAAM,OAAO,KAAK,MAAM,IAAI,YAAY,CAAC;AAC/C,WAAO;AAAA,MACL,YAAY,IAAI;AAAA,MAChB,SAAS,EAAE,GAAG,MAAM,gBAAgB,IAAI,QAAQ,IAAI,cAAc,KAAK,kBAAkB;AAAA,MACzF,MAAM,IAAI,SAAS,QAAQ;AAAA,MAC3B,iBAAiB;AAAA,IACnB;AAAA,EACF,SAAS,GAAG;AACV,WAAO,EAAE,YAAY,KAAK,MAAM,GAAG,WAAW,cAAc;AAAA,EAC9D;AACF;",
  "names": []
}
